[project]
name = "trame-server"
version = "3.2.7"
description = "Internal server side implementation of trame"
authors = [
    {name = "Kitware Inc."},
]
dependencies = [
    "wslink>=2.2.2,<3",
    "more-itertools",
]
requires-python = ">=3.7"
readme = "README.rst"
license = {text = "Apache License 2.0"}
keywords = ["Python", "Interactive", "Web", "Application", "Framework"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff",
    "pytest",
    "pytest-asyncio",
]

[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
where = ["."]

[tool.semantic_release]
version_toml = [
    "pyproject.toml:project.version",
]
build_command = """
  python -m venv .venv
  source .venv/bin/activate
  pip install -U pip build
  python -m build .
"""

[semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.pytest.ini_options]
log_cli_level = "INFO"
xfail_strict = true
minversion = "6.0"
addopts = ["-ra", "--strict-config", "--strict-markers"]
filterwarnings = ["error"]
testpaths = [
    "tests",
]

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py37"

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  # "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "ISC001",   # Conflicts with formatter
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
]
select = [
    "E",
    "W",
    "F",
    "B",
    "I",
    "UP",
]
fixable = ["ALL"]
unfixable = []


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[lint.pydocstyle]
convention = "google"
